/*
 * This file is generated by jOOQ.
 */
package ehroute.identityservice.entities.db.tables;


import ehroute.identityservice.entities.db.Keys;
import ehroute.identityservice.entities.db.Public;
import ehroute.identityservice.entities.db.tables.records.AccountRolesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountRoles extends TableImpl<AccountRolesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.account_roles</code>
     */
    public static final AccountRoles ACCOUNT_ROLES = new AccountRoles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountRolesRecord> getRecordType() {
        return AccountRolesRecord.class;
    }

    /**
     * The column <code>public.account_roles.account_id</code>.
     */
    public final TableField<AccountRolesRecord, Integer> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.account_roles.role_id</code>.
     */
    public final TableField<AccountRolesRecord, Integer> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.account_roles.updated_on</code>.
     */
    public final TableField<AccountRolesRecord, LocalDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.account_roles.created_on</code>.
     */
    public final TableField<AccountRolesRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private AccountRoles(Name alias, Table<AccountRolesRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountRoles(Name alias, Table<AccountRolesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.account_roles</code> table reference
     */
    public AccountRoles(String alias) {
        this(DSL.name(alias), ACCOUNT_ROLES);
    }

    /**
     * Create an aliased <code>public.account_roles</code> table reference
     */
    public AccountRoles(Name alias) {
        this(alias, ACCOUNT_ROLES);
    }

    /**
     * Create a <code>public.account_roles</code> table reference
     */
    public AccountRoles() {
        this(DSL.name("account_roles"), null);
    }

    public <O extends Record> AccountRoles(Table<O> child, ForeignKey<O, AccountRolesRecord> key) {
        super(child, key, ACCOUNT_ROLES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AccountRolesRecord> getPrimaryKey() {
        return Keys.ACCOUNT_ROLES_PKEY;
    }

    @Override
    public List<ForeignKey<AccountRolesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACCOUNT_ROLES__ACCOUNT_ROLES_ACCOUNT_ID_FKEY, Keys.ACCOUNT_ROLES__ACCOUNT_ROLES_ROLE_ID_FKEY);
    }

    private transient Accounts _accounts;
    private transient Roles _roles;

    public Accounts accounts() {
        if (_accounts == null)
            _accounts = new Accounts(this, Keys.ACCOUNT_ROLES__ACCOUNT_ROLES_ACCOUNT_ID_FKEY);

        return _accounts;
    }

    public Roles roles() {
        if (_roles == null)
            _roles = new Roles(this, Keys.ACCOUNT_ROLES__ACCOUNT_ROLES_ROLE_ID_FKEY);

        return _roles;
    }

    @Override
    public AccountRoles as(String alias) {
        return new AccountRoles(DSL.name(alias), this);
    }

    @Override
    public AccountRoles as(Name alias) {
        return new AccountRoles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountRoles rename(String name) {
        return new AccountRoles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountRoles rename(Name name) {
        return new AccountRoles(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
