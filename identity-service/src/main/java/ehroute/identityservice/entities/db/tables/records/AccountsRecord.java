/*
 * This file is generated by jOOQ.
 */
package ehroute.identityservice.entities.db.tables.records;


import ehroute.identityservice.entities.db.tables.Accounts;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountsRecord extends UpdatableRecordImpl<AccountsRecord> implements Record8<Long, String, String, byte[], String, LocalDateTime, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.accounts.id</code>.
     */
    public AccountsRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.accounts.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.accounts.email</code>.
     */
    public AccountsRecord setEmail(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.accounts.email</code>.
     */
    public String getEmail() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.accounts.address</code>.
     */
    public AccountsRecord setAddress(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.accounts.address</code>.
     */
    public String getAddress() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.accounts.public_key</code>.
     */
    public AccountsRecord setPublicKey(byte[] value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.accounts.public_key</code>.
     */
    public byte[] getPublicKey() {
        return (byte[]) get(3);
    }

    /**
     * Setter for <code>public.accounts.password</code>.
     */
    public AccountsRecord setPassword(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.accounts.password</code>.
     */
    public String getPassword() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.accounts.last_login</code>.
     */
    public AccountsRecord setLastLogin(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.accounts.last_login</code>.
     */
    public LocalDateTime getLastLogin() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>public.accounts.updated_on</code>.
     */
    public AccountsRecord setUpdatedOn(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.accounts.updated_on</code>.
     */
    public LocalDateTime getUpdatedOn() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>public.accounts.created_on</code>.
     */
    public AccountsRecord setCreatedOn(LocalDateTime value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.accounts.created_on</code>.
     */
    public LocalDateTime getCreatedOn() {
        return (LocalDateTime) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, String, byte[], String, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, String, String, byte[], String, LocalDateTime, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Accounts.ACCOUNTS.ID;
    }

    @Override
    public Field<String> field2() {
        return Accounts.ACCOUNTS.EMAIL;
    }

    @Override
    public Field<String> field3() {
        return Accounts.ACCOUNTS.ADDRESS;
    }

    @Override
    public Field<byte[]> field4() {
        return Accounts.ACCOUNTS.PUBLIC_KEY;
    }

    @Override
    public Field<String> field5() {
        return Accounts.ACCOUNTS.PASSWORD;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return Accounts.ACCOUNTS.LAST_LOGIN;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return Accounts.ACCOUNTS.UPDATED_ON;
    }

    @Override
    public Field<LocalDateTime> field8() {
        return Accounts.ACCOUNTS.CREATED_ON;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getEmail();
    }

    @Override
    public String component3() {
        return getAddress();
    }

    @Override
    public byte[] component4() {
        return getPublicKey();
    }

    @Override
    public String component5() {
        return getPassword();
    }

    @Override
    public LocalDateTime component6() {
        return getLastLogin();
    }

    @Override
    public LocalDateTime component7() {
        return getUpdatedOn();
    }

    @Override
    public LocalDateTime component8() {
        return getCreatedOn();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getEmail();
    }

    @Override
    public String value3() {
        return getAddress();
    }

    @Override
    public byte[] value4() {
        return getPublicKey();
    }

    @Override
    public String value5() {
        return getPassword();
    }

    @Override
    public LocalDateTime value6() {
        return getLastLogin();
    }

    @Override
    public LocalDateTime value7() {
        return getUpdatedOn();
    }

    @Override
    public LocalDateTime value8() {
        return getCreatedOn();
    }

    @Override
    public AccountsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public AccountsRecord value2(String value) {
        setEmail(value);
        return this;
    }

    @Override
    public AccountsRecord value3(String value) {
        setAddress(value);
        return this;
    }

    @Override
    public AccountsRecord value4(byte[] value) {
        setPublicKey(value);
        return this;
    }

    @Override
    public AccountsRecord value5(String value) {
        setPassword(value);
        return this;
    }

    @Override
    public AccountsRecord value6(LocalDateTime value) {
        setLastLogin(value);
        return this;
    }

    @Override
    public AccountsRecord value7(LocalDateTime value) {
        setUpdatedOn(value);
        return this;
    }

    @Override
    public AccountsRecord value8(LocalDateTime value) {
        setCreatedOn(value);
        return this;
    }

    @Override
    public AccountsRecord values(Long value1, String value2, String value3, byte[] value4, String value5, LocalDateTime value6, LocalDateTime value7, LocalDateTime value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountsRecord
     */
    public AccountsRecord() {
        super(Accounts.ACCOUNTS);
    }

    /**
     * Create a detached, initialised AccountsRecord
     */
    public AccountsRecord(Long id, String email, String address, byte[] publicKey, String password, LocalDateTime lastLogin, LocalDateTime updatedOn, LocalDateTime createdOn) {
        super(Accounts.ACCOUNTS);

        setId(id);
        setEmail(email);
        setAddress(address);
        setPublicKey(publicKey);
        setPassword(password);
        setLastLogin(lastLogin);
        setUpdatedOn(updatedOn);
        setCreatedOn(createdOn);
    }
}
