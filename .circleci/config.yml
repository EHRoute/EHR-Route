version: 2.1

parameters:
  # This parameter is used to trigger the main workflow
  trigger:
    type: boolean
    default: true

  ############################################################
  ## Services Workflows Triggers Parameters
  ############################################################

  config-server:
    type: boolean
    default: false

  discovery-service:
    type: boolean
    default: false

  gateway-service:
    type: boolean
    default: false

  auth-service:
    type: boolean
    default: false

  patient-service:
    type: boolean
    default: false

  provider-service:
    type: boolean
    default: false

  # Custom parameters
  deploy:
    type: boolean
    default: false


executors:
  node:
    docker:
      - image: circleci/node

jobs:
  trigger-workflows:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          # This step is added to demonstrate the possibility to dynamically set the user token
          name: Set token
          command: echo "export CIRCLE_USER_TOKEN=${CIRCLECI_TOKEN}" >> $BASH_ENV
      - run:
          name: Trigger workflows
          command: chmod +x .circleci/monorepo.sh && .circleci/monorepo.sh
          environment:
            # (optional) print additional debug information
            MONOREPO_DEBUG: "true"
            # (optional) additional CI parameters to include in the pipeline (must be a valid JSON)
            CI_PARAMETERS: '{ "deploy": true }'

  build:
    parameters:
      package_name:
        type: string

    executor: node
    working_directory: ~/project/<< parameters.package_name >>

    steps:
      - checkout:
          path: ~/project
      # This step is added only to show that we are in the package directory
      - run:
          name: Content
          command: |
            cat README.md
            echo "<< parameters.package_name >> built." > build.txt
      - run:
          name: Build
          command: echo "Build << parameters.package_name >> ..."
      - persist_to_workspace:
          root: ~/project
          paths:
            - << parameters.package_name >>

  deploy:
    parameters:
      package_name:
        type: string

    executor: node
    working_directory: ~/project/<< parameters.package_name >>

    steps:
      - attach_workspace:
          at: ~/project
      # This step is added to show that files are available from the build job.
      - run:
          name: Content to deploy
          command: ls && cat build.txt
      - deploy:
          name: Deploy
          command: echo "Deploying << parameters.package_name >> (<< pipeline.parameters.deploy >>) ..."

workflows:
  version: 2.1

  # The main workflow responsible for triggering all other workflows
  # in which changes are detected.
  ci:
    when: << pipeline.parameters.trigger >>
    jobs:
      - trigger-workflows


  ############################################################
  ## Services Workflows
  ############################################################

  config-server:
    when: << pipeline.parameters.config-server >>
    jobs:
      build:
#        name: config-server-build
#        package_name: config-server
#        docker:
#          - image: circleci/openjdk:11.0.1-jdk
#        environment:
#          # Limit max heap to 512MB for Heroku's max memory limit on free apps
#          JVM_OPTS: -Xmx512m
#          TERM: dumb
#        steps:
#          - checkout
#
#          # Use layer caching
#          - setup_remote_docker:
#              - docker_layer_caching: true
#
#          # Login to DockerHub to push the built image shortly
#          - run:
#              name: Login to DockerHub
#              command: docker login -u $DOCKER_USER -p $DOCKER_PASS
#
#          # Decrypt app properties
#          - run:
#              name: Decrpyt Properties
#              command: openssl enc -d -aes-256-ecb -md md5 -in src/main/resources/application.yml.secrets -out src/main/resources/application.yml -k $SECRETS_KEY
#
#          # Restore dependencies cache
#          - restore_cache:
#              keys:
#                - v1-dependencies-{{ checksum "pom.xml" }}
#                # fallback to using the latest cache if no exact match is found
#                - v1-dependencies-
#          - run: mvn dependency:go-offline
#
#          # Cache dependencies
#          - save_cache:
#              paths:
#                - ~/.m2
#              key: v1-dependencies-{{ checksum "pom.xml" }}
#
#          # Package application
#          - run: mvn clean install
#
#          # Build docker image from dockerfile
#          - run: docker build -t config-server-img .
#
#          # Push docker image to DockerHub
#          - run: docker push config-server-img
#
#          # store raw contents of src code
#          - store_artifacts:
#            path: target/classes
#            destination: config-server-artifacts

#
#    discovery-service:
#        when: << pipeline.parameters.discovery-service >>
#        jobs:
#            - build:
#                  name: discovery-service-build
#                  package_name: discovery-service
#            - deploy:
#                  name: discovery-service-deploy
#                  package_name: discovery-service
#                  requires:
#                      - discovery-service-build
#
#    gateway-service:
#        when: << pipeline.parameters.gateway-service >>
#        jobs:
#            -   build:
#                    name: gateway-service-build
#                    package_name: gateway-service
#            -   deploy:
#                    name: gateway-service-deploy
#                    package_name: gateway-service
#                    requires:
#                        - gateway-service-build
#
#    auth-service:
#        when: << pipeline.parameters.auth-service >>
#        jobs:
#            -   build:
#                    name: auth-service-build
#                    package_name: auth-service
#            -   deploy:
#                    name: auth-service-deploy
#                    package_name: auth-service
#                    requires:
#                        - auth-service-build
#
#    patient-service:
#        when: << pipeline.parameters.patient-service >>
#        jobs:
#            -   build:
#                    name: patient-service-build
#                    package_name: patient-service
#            -   deploy:
#                    name: patient-service-deploy
#                    package_name: patient-service
#                    requires:
#                        - patient-service-build
#
#    provider-service:
#        when: << pipeline.parameters.provider-service >>
#        jobs:
#            -   build:
#                    name: provider-service-build
#                    package_name: provider-service
#            -   deploy:
#                    name: provider-service-deploy
#                    package_name: provider-service
#                    requires:
#                        - provider-service-build
